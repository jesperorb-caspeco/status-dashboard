{"version":3,"sources":["api/index.ts","api/urls.ts","components/statusLight/StatusLight.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["System","Task","ResponseCode","getStatus","_x","_getStatus","apply","this","arguments","_callee","status","response","badge","isLiveAndWell","regenerator_default","a","wrap","_context","prev","next","fetch","url","sent","text","task","Live","ok","system","ReverseProxy","abrupt","success","MARC","WebPlatform","includes","failed","unknown","t0","stop","allStatuses","_x2","_allStatuses","_callee2","urls","_context2","Promise","all","map","assignStatus","responseCode","Object","assign","time","Date","now","Success","Failed","Unknown","compareStatuses","previousStatuses","newStatuses","length","newSorted","sort","sortByName","previousSorted","newDate","s","i","days","getDays","hours","getHours","minutes","getMinutes","b","past","getTime","Math","round","abs","floor","URLS","Build","IntegrationTest","UnitTest","React","memo","_ref","type","_ref$days","_ref$hours","_ref$minutes","react_default","createElement","className","cn","defineProperty","concat","App","interval","state","statuses","lastUpdated","checked","_this","setState","previousState","setInLocalStorage","localStorage","setItem","JSON","stringify","setTheme","bg","root","document","documentElement","style","setProperty","toString","saveTheme","handleChange","renderStatuses","components_statusLight_StatusLight","key","props","setInterval","getItem","clearInterval","paddingTop","paddingLeft","unchecked","toLocaleString","react_switch_default","onColor","checkedIcon","uncheckedIcon","onChange","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","components_app_App","parse","error","getStatusesFromLocalStorage","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.333d0efe.chunk.js","sourcesContent":["export const defaultPollingRate = 60000;\r\n\r\nexport enum System {\r\n  WebPlatform = \"WebPlatform\",\r\n  MARC = \"MARC\",\r\n  ReverseProxy = \"ReverseProxy\",\r\n}\r\n\r\nexport enum Task {\r\n  UnitTest = \"Unit\",\r\n  IntegrationTest = \"Integration\",\r\n  Build = \"Build\",\r\n  Live = \"Live\",\r\n}\r\n\r\nexport enum ResponseCode {\r\n  Success = \"Success\",\r\n  Failed = \"Failed\",\r\n  Unknown = \"Unknown\",\r\n}\r\n\r\nexport interface Status {\r\n  system: System;\r\n  task: Task;\r\n  url: string;\r\n  status: ResponseCode;\r\n  time?: number;\r\n  days?: number;\r\n  hours?: number;\r\n  minutes?: number;\r\n}\r\n\r\nexport async function getStatus(status: Status) {\r\n  try {\r\n    const response = await fetch(status.url);\r\n    const badge = await response.text();\r\n    const isLiveAndWell = status.task === Task.Live && response.ok;\r\n    if (status.system === System.ReverseProxy && response.ok) {\r\n      return success(status);\r\n    }\r\n    if (status.system === System.MARC && isLiveAndWell) {\r\n      return success(status);\r\n    }\r\n    if (status.system === System.WebPlatform && isLiveAndWell) {\r\n      return success(status);\r\n    }\r\n    if (badge.includes(\"succeeded\") && response.ok) {\r\n      return success(status);\r\n    }\r\n    if (badge.includes(\"failed\")) {\r\n      return failed(status);\r\n    }\r\n    return unknown(status);\r\n  } catch (error) {\r\n    return failed(status);\r\n  }\r\n}\r\n\r\nexport function getStatusesFromLocalStorage(): Status[] {\r\n  try {\r\n    const statuses = localStorage.getItem(\"statuses\");\r\n    if (statuses) {\r\n      return JSON.parse(statuses);\r\n    }\r\n    return [];\r\n  } catch(error) {\r\n      return [];\r\n  }\r\n}\r\n\r\nexport function setStatusesInLocalStorage(statuses: Status[]): void {\r\n  localStorage.setItem(\"statuses\", JSON.stringify(statuses));\r\n}\r\n\r\nexport function saveTheme(checked: boolean) {\r\n  localStorage.setItem(\"theme\", checked.toString());\r\n}\r\n\r\nexport function getTheme() {\r\n  const theme = localStorage.getItem(\"theme\");\r\n  return theme === \"false\" ? false : true;\r\n}\r\n\r\nexport async function allStatuses(urls: Status[]) {\r\n  return Promise.all(urls.map(getStatus));\r\n}\r\n\r\nfunction assignStatus(status: Status, responseCode: ResponseCode) {\r\n  return Object.assign({}, status, { status: responseCode, time: Date.now() });\r\n}\r\n\r\nfunction success(status: Status) {\r\n  return assignStatus(status, ResponseCode.Success);\r\n}\r\n\r\nfunction failed(status: Status) {\r\n  return assignStatus(status, ResponseCode.Failed);\r\n}\r\n\r\nfunction unknown(status: Status) {\r\n  return assignStatus(status, ResponseCode.Unknown);\r\n}\r\n\r\nexport function compareStatuses(previousStatuses: Status[], newStatuses: Status[]) {\r\n  if (previousStatuses.length > 0 && newStatuses.length > 0) {\r\n    const newSorted = newStatuses.sort(sortByName);\r\n    const previousSorted = previousStatuses.sort(sortByName);\r\n    const newDate = Date.now();\r\n    return newSorted.map((s, i) =>\r\n      s.status !== previousSorted[i].status\r\n        ? Object.assign(s, {\r\n            time: newDate,\r\n            days: getDays(newDate),\r\n            hours: getHours(newDate),\r\n            minutes: getMinutes(newDate),\r\n          })\r\n        : Object.assign(s, {\r\n            time: previousSorted[i].time,\r\n            days: getDays(newDate),\r\n            hours: getHours(previousSorted[i].time),\r\n            minutes: getMinutes(previousSorted[i].time),\r\n          })\r\n    );\r\n  }\r\n  return newStatuses;\r\n}\r\n\r\nfunction sortByName(a: Status, b: Status): number {\r\n  if (a.system + a.task < b.system + b.task) {\r\n    return -1;\r\n  }\r\n  if (a.system + a.task > b.system + b.task) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getMinutes(past: number | undefined): number {\r\n  const time = past || new Date().getTime();\r\n  return Math.round((Math.abs(new Date().getTime() - time) / (1000 * 60)) % 60);\r\n}\r\n\r\nfunction getHours(past: number | undefined): number {\r\n  const time = past || new Date().getTime();\r\n  return Math.floor((Math.abs(new Date().getTime() - time) / (1000 * 60 * 60)) % 24);\r\n}\r\n\r\nfunction getDays(past: number | undefined): number {\r\n  const time = past || new Date().getTime();\r\n  return Math.floor((Math.abs(new Date().getTime() - time) / (1000 * 60 * 60 * 24)) % 24);\r\n}\r\n","import { Status, System, Task, ResponseCode } from \"./index\";\r\n\r\nexport const URLS: Status[] = [\r\n  {\r\n    system: System.MARC,\r\n    task: Task.Build,\r\n    url:\r\n      \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/MARC%20Build%20&%20Deploy%20Trackingdev\",\r\n    status: ResponseCode.Unknown,\r\n  },\r\n  {\r\n    system: System.WebPlatform,\r\n    task: Task.Build,\r\n    url:\r\n      \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/WEBPLATFORM%20Build%20&%20Deploy%20Trackingdev\",\r\n    status: ResponseCode.Unknown,\r\n  },\r\n  {\r\n    system: System.MARC,\r\n    task: Task.Live,\r\n    url: \"https://cloud.caspeco.se/api/test/get\",\r\n    status: ResponseCode.Unknown,\r\n  },\r\n  {\r\n    system: System.WebPlatform,\r\n    task: Task.Live,\r\n    url: \"https://cloud.caspeco.se\",\r\n    status: ResponseCode.Unknown,\r\n  },\r\n  {\r\n    system: System.MARC,\r\n    task: Task.IntegrationTest,\r\n    url:\r\n      \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/MARC%20Build%20&%20IntegrationTest\",\r\n    status: ResponseCode.Unknown,\r\n  },\r\n  {\r\n    system: System.WebPlatform,\r\n    task: Task.IntegrationTest,\r\n    url:\r\n      \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/WEBPLATFORM%20Build%20&%20Test\",\r\n    status: ResponseCode.Unknown,\r\n  },\r\n  {\r\n    system: System.MARC,\r\n    task: Task.UnitTest,\r\n    url:\r\n      \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/MARC%20Build%20&%20Unit%20Test\",\r\n    status: ResponseCode.Unknown,\r\n  },\r\n  {\r\n    system: System.ReverseProxy,\r\n    task: Task.Live,\r\n    url: \"https://cloud.caspeco.se/.where\",\r\n    status: ResponseCode.Unknown,\r\n  },\r\n];\r\n","import React, { SFC } from \"react\";\r\nimport cn from \"classnames\";\r\nimport { ResponseCode, System } from \"../../api\";\r\nimport \"./StatusLight.css\";\r\n\r\ninterface IStatusLightProps {\r\n  system: System;\r\n  text: string;\r\n  type: ResponseCode;\r\n  time?: number;\r\n  days?: number;\r\n  hours?: number;\r\n  minutes?: number;\r\n}\r\n\r\nconst StatusLight: SFC<IStatusLightProps> = ({\r\n  system,\r\n  text,\r\n  type,\r\n  days = 0,\r\n  hours = 0,\r\n  minutes = 0,\r\n}: IStatusLightProps) => {\r\n  return (\r\n    <div className=\"status-container\">\r\n      <div className=\"status__text\">\r\n        {system}&nbsp;<span>{text}</span>\r\n      </div>\r\n      <div className={cn(\"status__light\", { [`status__light--${type}`]: true })}>\r\n        <div> \r\n          {\" \"} \r\n          {days} d {hours} h {minutes} m\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(StatusLight);\r\n","import React, { PureComponent } from \"react\";\nimport Switch from \"react-switch\";\nimport { allStatuses, Status, defaultPollingRate, compareStatuses, setStatusesInLocalStorage, saveTheme, getTheme } from \"../../api\";\nimport { URLS } from \"../../api/urls\";\nimport StatusLight from \"../statusLight/StatusLight\";\n\nimport \"./App.css\";\n\ninterface IAppProps {\n  statuses: Status[];\n}\n\ninterface IAppState {\n  statuses: Status[];\n  lastUpdated: Date;\n  checked: boolean;\n}\n\nclass App extends PureComponent<IAppProps, IAppState> {\n  private interval: any = null;\n\n  state = {\n    statuses: [],\n    lastUpdated: new Date(),\n    checked: true\n  };\n\n  async componentDidMount() {\n    const { statuses } = this.props;\n    this.setState({ statuses }, this.allStatuses)\n    this.interval = setInterval(this.allStatuses, defaultPollingRate);\n    this.handleChange(getTheme());\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  private allStatuses = async (): Promise<void> => {\n    const statuses = await allStatuses(URLS);\n    this.setState((previousState: IAppState) => {\n      return {\n        statuses: compareStatuses(previousState.statuses, statuses),\n        lastUpdated: new Date(),\n      };\n    }, this.setInLocalStorage);\n  };\n\n  private setInLocalStorage = () => {\n    setStatusesInLocalStorage(this.state.statuses);\n  }\n\n  private setTheme = (checked: boolean): void => {\n    let bg = checked ? \"#f1f1f1\" : \"#333\";\n    let text = checked ? \"#333\" : \"#f1f1f1\";\n    const root = document.documentElement;\n    root.style.setProperty(\"--text-color\", text);\n    root.style.setProperty(\"--bg-color\", bg);\n    saveTheme(checked);\n  };\n\n  private handleChange = (checked: boolean): void => {\n    this.setTheme(checked);\n    this.setState({ checked });\n  };\n\n  renderStatuses = (statuses: Status[] | null) => {\n    if (!statuses) {\n      return null;\n    }\n    return statuses.map((s, i) => (\n      <StatusLight\n        key={i}\n        system={s.system}\n        text={s.task}\n        type={s.status}\n        days={s.days}\n        hours={s.hours}\n        minutes={s.minutes}\n      />\n    ));\n  };\n\n  render() {\n    const checked = <div style={{ paddingTop: 2, paddingLeft: 4 }}>🌝</div>;\n    const unchecked = <div style={{paddingTop: 2, paddingLeft: 4 }}>🌛</div>;\n    return (\n      <div className=\"app\">\n        <div className=\"last-updated\">\n          Senast uppdaterad:{\" \"}\n          {this.state.lastUpdated && this.state.lastUpdated.toLocaleString(\"sv-SE\")}\n        </div>\n        <div className=\"toggle-switch\">\n          <Switch onColor=\"#80adfa\" checkedIcon={checked} uncheckedIcon={unchecked} onChange={this.handleChange} checked={this.state.checked} />\n        </div>\n        {this.renderStatuses(this.state.statuses)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app/App\";\nimport { getStatusesFromLocalStorage } from \"./api\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App statuses={getStatusesFromLocalStorage()}/>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}