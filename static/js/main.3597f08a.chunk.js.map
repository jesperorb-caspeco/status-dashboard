{"version":3,"sources":["api/index.ts","api/urls.ts","components/statusLight/StatusLight.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["System","Task","ResponseCode","getStatus","_x","_getStatus","apply","this","arguments","_callee","status","response","badge","isLiveAndWell","regenerator_default","a","wrap","_context","prev","next","fetch","url","sent","text","task","Live","ok","system","ReverseProxy","abrupt","success","MARC","WebPlatform","includes","failed","unknown","t0","stop","allStatuses","_x2","_allStatuses","_callee2","urls","_context2","Promise","all","map","assignStatus","responseCode","Object","assign","time","Date","now","Success","Failed","Unknown","compareStatuses","previousStatuses","newStatuses","length","newSorted","sort","sortByName","previousSorted","newDate","s","i","hours","getHours","minutes","getMinutes","b","past","getTime","Math","round","abs","floor","URLS","Build","IntegrationTest","UnitTest","React","memo","_ref","type","_ref$hours","_ref$minutes","react_default","createElement","className","cn","defineProperty","concat","App","interval","state","statuses","lastUpdated","_this","setState","previousState","renderStatuses","components_statusLight_StatusLight","key","setInterval","clearInterval","toLocaleString","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","components_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3597f08a.chunk.js","sourcesContent":["export const defaultPollingRate = 60000;\r\n\r\nexport enum System {\r\n    WebPlatform = \"WebPlatform\",\r\n    MARC = \"MARC\",\r\n    ReverseProxy = \"ReverseProxy\"\r\n}\r\n\r\nexport enum Task {\r\n    UnitTest = \"Unit\",\r\n    IntegrationTest = \"Integration\",\r\n    Build = \"Build\",\r\n    Live = \"Live\"\r\n}\r\n\r\nexport enum ResponseCode {\r\n    Success = \"Success\",\r\n    Failed = \"Failed\",\r\n    Unknown = \"Unknown\"\r\n}\r\n\r\nexport interface Status {\r\n    system: System;\r\n    task: Task;\r\n    url: string;\r\n    status: ResponseCode\r\n    time?: number;\r\n    hours?: number;\r\n    minutes?: number;\r\n}\r\n\r\nexport async function getStatus(status: Status) {\r\n    try {\r\n        const response = await fetch(status.url);\r\n        const badge = await response.text();\r\n        const isLiveAndWell = status.task === Task.Live && response.ok;\r\n        if(status.system === System.ReverseProxy && response.ok) {\r\n            return success(status);\r\n        }\r\n        if(status.system === System.MARC && isLiveAndWell) {\r\n            return success(status);\r\n        }\r\n        if(status.system === System.WebPlatform && isLiveAndWell) {\r\n            return success(status);\r\n        }\r\n        if(badge.includes(\"succeeded\") && response.ok) {\r\n            return success(status);\r\n        }\r\n        if(badge.includes(\"failed\")) {\r\n            return failed(status);\r\n        }\r\n        return unknown(status);\r\n    } catch (error) {\r\n        return failed(status);\r\n    }\r\n}\r\n\r\nexport async function allStatuses(urls: Status[]) {\r\n    return Promise.all(urls.map(getStatus));\r\n}\r\n\r\nfunction assignStatus(status: Status, responseCode: ResponseCode) {\r\n    return Object.assign({}, status, { status: responseCode, time: Date.now() });\r\n}\r\n\r\nfunction success(status: Status) {\r\n    return assignStatus(status, ResponseCode.Success);\r\n}\r\n\r\nfunction failed(status: Status) {\r\n    return assignStatus(status, ResponseCode.Failed);\r\n}\r\n\r\nfunction unknown(status: Status) {\r\n    return assignStatus(status, ResponseCode.Unknown);\r\n}\r\n\r\nexport function compareStatuses(previousStatuses: Status[], newStatuses: Status[]) {\r\n    if(previousStatuses.length > 0 && newStatuses.length > 0) {\r\n        const newSorted = newStatuses.sort(sortByName);\r\n        const previousSorted = previousStatuses.sort(sortByName);\r\n        const newDate = Date.now();\r\n        return newSorted.map((s, i) => s.status !== previousSorted[i].status\r\n            ? Object.assign(s, { time: newDate, hours: getHours(newDate), minutes: getMinutes(newDate) })\r\n            : Object.assign(s, { time: previousSorted[i].time, hours: getHours(previousSorted[i].time), minutes: getMinutes(previousSorted[i].time) })\r\n        );\r\n    }\r\n    return newStatuses;\r\n}\r\n\r\nfunction sortByName(a: Status, b: Status): number {\r\n    if((a.system + a.task) < (b.system + b.task)) {\r\n        return -1;\r\n    }\r\n    if((a.system + a.task) > (b.system + b.task)) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getMinutes(past: number | undefined): number {\r\n    const time = past || new Date().getTime();\r\n    return Math.round(Math.abs(new Date().getTime() - time) / (1000 * 60) % 60)\r\n    \r\n}\r\n\r\nfunction getHours(past: number | undefined): number {\r\n    const time = past || new Date().getTime();\r\n    return Math.floor(Math.abs(new Date().getTime() - time) / (1000 * 60 * 60) % 24);\r\n}","import { Status, System, Task, ResponseCode } from \"./index\";\r\n\r\nexport const URLS: Status[] = [\r\n    {   \r\n        system: System.MARC,\r\n        task: Task.Build,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/MARC%20Build%20&%20Deploy%20Trackingdev\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.WebPlatform,\r\n        task: Task.Build,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/WEBPLATFORM%20Build%20&%20Deploy%20Trackingdev\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.MARC,\r\n        task: Task.Live,\r\n        url: \"https://cloud.caspeco.se/api/test/get\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.WebPlatform,\r\n        task: Task.Live,\r\n        url: \"https://cloud.caspeco.se\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.MARC,\r\n        task: Task.IntegrationTest,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/MARC%20Build%20&%20IntegrationTest\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.WebPlatform,\r\n        task: Task.IntegrationTest,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/WEBPLATFORM%20Build%20&%20Test\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.MARC,\r\n        task: Task.UnitTest,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/MARC%20Build%20&%20Unit%20Test\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.ReverseProxy,\r\n        task: Task.Live,\r\n        url: \"https://cloud.caspeco.se/.where\",\r\n        status: ResponseCode.Unknown\r\n    }\r\n];","import React, { SFC } from \"react\";\r\nimport cn from \"classnames\";\r\nimport { ResponseCode, System } from \"../../api\";\r\nimport \"./StatusLight.css\";\r\n\r\ninterface IStatusLightProps {\r\n    system: System;\r\n    text: string;\r\n    type: ResponseCode;\r\n    time?: number;\r\n    hours?: number;\r\n    minutes?: number;\r\n    useIcon?: boolean;\r\n}\r\n\r\nconst StatusLight: SFC<IStatusLightProps> = ({ system, text, type, hours = 0, minutes = 0 }: IStatusLightProps) => {\r\n    return(\r\n        <div className=\"status-container\">\r\n            <div className=\"status__text\">{ system }&nbsp;<span>{ text }</span></div>\r\n          <div className={cn(\"status__light\", { [`status__light--${type}`]: true })}>\r\n            <div> { hours } h { minutes } m</div>\r\n          </div>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default React.memo(StatusLight);\r\n","import React, { PureComponent } from 'react';\nimport { allStatuses, Status, defaultPollingRate, compareStatuses } from \"../../api\";\nimport { URLS } from \"../../api/urls\";\nimport StatusLight from \"../statusLight/StatusLight\";\n\nimport \"./App.css\";\n\ninterface IAppProps { }\n\ninterface IAppState {\n  statuses: Status[];\n  lastUpdated: Date;\n}\n\nclass App extends PureComponent<IAppProps, IAppState> {\n\n  private interval: any = null;\n\n  state = {\n    statuses: [],\n    lastUpdated: new Date()\n  }\n\n  async componentDidMount() {\n    this.allStatuses();\n    this.interval = setInterval(this.allStatuses, defaultPollingRate);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  private allStatuses = async (): Promise<void> => {\n    const statuses = await allStatuses(URLS);\n    this.setState((previousState: IAppState) => {\n      return {\n        statuses: compareStatuses(previousState.statuses, statuses),\n        lastUpdated: new Date()\n      }\n    })\n  }\n\n  renderStatuses = (statuses: Status[] | null) => {\n    if (!statuses) {\n      return null;\n    }\n    return statuses\n      .map((s, i) => <StatusLight \n                        key={i}\n                        system={s.system}\n                        text={s.task}\n                        type={s.status}\n                        hours={s.hours}\n                        minutes={s.minutes}\n                    />\n      )\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"last-updated\">Senast uppdaterad: { this.state.lastUpdated && this.state.lastUpdated.toLocaleString('sv-SE')}</div>\n        {this.renderStatuses(this.state.statuses)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}