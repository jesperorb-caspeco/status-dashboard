{"version":3,"sources":["api/index.ts","api/urls.ts","components/statusLight/StatusLight.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["System","Task","ResponseCode","getStatus","_x","_getStatus","apply","this","arguments","_callee","status","response","badge","regenerator_default","a","wrap","_context","prev","next","fetch","url","sent","text","system","ReverseProxy","ok","abrupt","success","Cloud","task","Live","includes","failed","unknown","t0","stop","allBadges","_x2","_allBadges","_callee2","urls","_context2","Promise","all","map","Object","assign","Success","Failed","Unknown","URLS","MARC","Build","WebPlatform","IntegrationTest","UnitTest","React","memo","_ref","type","react_default","createElement","className","cn","defineProperty","concat","App","interval","state","statuses","badges","_this","setState","renderStatuses","s","i","components_statusLight_StatusLight","key","useIcon","setInterval","clearInterval","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","components_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAEYA,EAOAC,EAOAC,8FAaL,SAAeC,EAAtBC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,EAAyBC,GAAzB,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEwBC,MAAMT,EAAOU,KAFrC,cAEOT,EAFPK,EAAAK,KAAAL,EAAAE,KAAA,EAGqBP,EAASW,OAH9B,UAGOV,EAHPI,EAAAK,KAIIX,EAAOa,SAAWvB,EAAOwB,eAAgBb,EAASc,GAJtD,CAAAT,EAAAE,KAAA,eAAAF,EAAAU,OAAA,SAKYC,EAAQjB,IALpB,UAOIA,EAAOa,SAAWvB,EAAO4B,OAASlB,EAAOmB,OAAS5B,EAAK6B,OAAQnB,EAASc,GAP5E,CAAAT,EAAAE,KAAA,gBAAAF,EAAAU,OAAA,SAQYC,EAAQjB,IARpB,YAUIE,EAAMmB,SAAS,eAAgBpB,EAASc,GAV5C,CAAAT,EAAAE,KAAA,gBAAAF,EAAAU,OAAA,SAWYC,EAAQjB,IAXpB,YAaIE,EAAMmB,SAAS,UAbnB,CAAAf,EAAAE,KAAA,gBAAAF,EAAAU,OAAA,SAcYM,EAAOtB,IAdnB,eAAAM,EAAAU,OAAA,SAgBQO,EAAQvB,IAhBhB,eAAAM,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,SAAAA,EAAAU,OAAA,SAkBQM,EAAOtB,IAlBf,yBAAAM,EAAAmB,SAAA1B,EAAA,yCAsBA,SAAe2B,EAAtBC,GAAA,OAAAC,EAAAhC,MAAAC,KAAAC,sDAAO,SAAA+B,EAAyBC,GAAzB,OAAA3B,EAAAC,EAAAC,KAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,cAAAuB,EAAAf,OAAA,SACIgB,QAAQC,IAAIH,EAAKI,IAAIzC,KADzB,wBAAAsC,EAAAN,SAAAI,6BAIP,SAASZ,EAAQjB,GACb,OAAOmC,OAAOC,OAAO,GAAIpC,EAAQ,CAAEA,OAAQR,EAAa6C,UAG5D,SAASf,EAAOtB,GACZ,OAAOmC,OAAOC,OAAO,GAAIpC,EAAQ,CAAEA,OAAQR,EAAa8C,SAG5D,SAASf,EAAQvB,GACb,OAAOmC,OAAOC,OAAO,GAAIpC,EAAQ,CAAEA,OAAQR,EAAa+C,oBA9DhDjD,gHAOAC,wGAOAC,yECdL,IAAMgD,EAAiB,CAC1B,CACI3B,OAAQvB,EAAOmD,KACftB,KAAM5B,EAAKmD,MACXhC,IAAK,uGACLV,OAAQR,EAAa+C,SAEzB,CACI1B,OAAQvB,EAAOqD,YACfxB,KAAM5B,EAAKmD,MACXhC,IAAK,8GACLV,OAAQR,EAAa+C,SAEzB,CACI1B,OAAQvB,EAAO4B,MACfC,KAAM5B,EAAK6B,KACXV,IAAK,wCACLV,OAAQR,EAAa+C,SAEzB,CACI1B,OAAQvB,EAAOwB,aACfK,KAAM5B,EAAK6B,KACXV,IAAK,kCACLV,OAAQR,EAAa+C,SAEzB,CACI1B,OAAQvB,EAAOmD,KACftB,KAAM5B,EAAKqD,gBACXlC,IAAK,kGACLV,OAAQR,EAAa+C,SAEzB,CACI1B,OAAQvB,EAAOqD,YACfxB,KAAM5B,EAAKqD,gBACXlC,IAAK,8FACLV,OAAQR,EAAa+C,SAEzB,CACI1B,OAAQvB,EAAOmD,KACftB,KAAM5B,EAAKsD,SACXnC,IAAK,8FACLV,OAAQR,EAAa+C,iCCtBdO,aAAMC,KATuB,SAAAC,GAA+C,IAA5CnC,EAA4CmC,EAA5CnC,OAAQD,EAAoCoC,EAApCpC,KAAMqC,EAA8BD,EAA9BC,KACzD,OACIC,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,oBACXF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,gBAAiBvC,EAAhC,IAAyCqC,EAAA9C,EAAA+C,cAAA,YAAQvC,IACnDsC,EAAA9C,EAAA+C,cAAA,OAAKC,UAAWC,IAAG,gBAADlB,OAAAmB,EAAA,EAAAnB,CAAA,qBAAAoB,OAAuCN,IAAS,UCmC7DO,oNApCLC,SAAgB,OAExBC,MAAQ,CACNC,SAAU,QAYJC,4BAAS,SAAA7D,IAAA,IAAA4D,EAAA,OAAAxD,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQkB,EAAUc,GADlB,OACTmB,EADSrD,EAAAK,KAEfkD,EAAKC,SAAS,CAAEH,aAFD,wBAAArD,EAAAmB,SAAA1B,QAKjBgE,eAAiB,SAACJ,GAChB,OAAKA,EAGEA,EAASzB,IAAI,SAAC8B,EAAGC,GAAJ,OAAUf,EAAA9C,EAAA+C,cAACe,EAAD,CAAaC,IAAKF,EAAGpD,OAAQmD,EAAEnD,OAAQD,KAAMoD,EAAE7C,KAAM8B,KAAMe,EAAEhE,OAAQoE,SAAO,MAFjG,iMAfTvE,KAAK+D,SACL/D,KAAK4D,SAAWY,YAAYxE,KAAK+D,OHvBH,sJG2B9BU,cAAczE,KAAK4D,2CAgBnB,OACEP,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,OACZvD,KAAKkE,eAAelE,KAAK6D,MAAMC,kBAhCtBY,wBCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAA9C,EAAA+C,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f42b320.chunk.js","sourcesContent":["export const defaultPollingRate = 60000;\r\n\r\nexport enum System {\r\n    Cloud = \"Cloud\",\r\n    WebPlatform = \"WebPlatform\",\r\n    MARC = \"MARC\",\r\n    ReverseProxy = \"ReverseProxy\"\r\n}\r\n\r\nexport enum Task {\r\n    UnitTest = \"Unit\",\r\n    IntegrationTest = \"Integration\",\r\n    Build = \"Build\",\r\n    Live = \"Live\"\r\n}\r\n\r\nexport enum ResponseCode {\r\n    Success = \"Success\",\r\n    Failed = \"Failed\",\r\n    Unknown = \"Unknown\"\r\n}\r\n\r\nexport interface Status {\r\n    system: System;\r\n    task: Task;\r\n    url: string;\r\n    status: ResponseCode\r\n}\r\n\r\nexport async function getStatus(status: Status) {\r\n    try {\r\n        const response = await fetch(status.url);\r\n        const badge = await response.text();\r\n        if(status.system === System.ReverseProxy && response.ok) {\r\n            return success(status);\r\n        }\r\n        if(status.system === System.Cloud && status.task === Task.Live && response.ok) {\r\n            return success(status);\r\n        }\r\n        if(badge.includes(\"succeeded\") && response.ok) {\r\n            return success(status);\r\n        }\r\n        if(badge.includes(\"failed\")) {\r\n            return failed(status);\r\n        }\r\n        return unknown(status);\r\n    } catch (error) {\r\n        return failed(status);\r\n    }\r\n}\r\n\r\nexport async function allBadges(urls: Status[]) {\r\n    return Promise.all(urls.map(getStatus));\r\n}\r\n\r\nfunction success(status: Status) {\r\n    return Object.assign({}, status, { status: ResponseCode.Success });\r\n}\r\n\r\nfunction failed(status: Status) {\r\n    return Object.assign({}, status, { status: ResponseCode.Failed });\r\n}\r\n\r\nfunction unknown(status: Status) {\r\n    return Object.assign({}, status, { status: ResponseCode.Unknown });\r\n}","import { Status, System, Task, ResponseCode } from \"./index\";\r\n\r\nexport const URLS: Status[] = [\r\n    {   \r\n        system: System.MARC,\r\n        task: Task.Build,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/MARC%20Build%20&%20Deploy%20Trackingdev\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.WebPlatform,\r\n        task: Task.Build,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/WEBPLATFORM%20Build%20&%20Deploy%20Trackingdev\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.Cloud,\r\n        task: Task.Live,\r\n        url: \"https://cloud.caspeco.se/api/test/get\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.ReverseProxy,\r\n        task: Task.Live,\r\n        url: \"https://cloud.caspeco.se/.where\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.MARC,\r\n        task: Task.IntegrationTest,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/MARC%20Build%20&%20IntegrationTest\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.WebPlatform,\r\n        task: Task.IntegrationTest,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/WEBPLATFORM%20Build%20&%20Test\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n    {\r\n        system: System.MARC,\r\n        task: Task.UnitTest,\r\n        url: \"https://caspecodev.visualstudio.com/Cloud/_apis/build/status/MARC%20Build%20&%20Unit%20Test\",\r\n        status: ResponseCode.Unknown\r\n    },\r\n];","import React, { SFC } from \"react\";\r\nimport cn from \"classnames\";\r\nimport { ResponseCode, System } from \"../../api\";\r\nimport \"./StatusLight.css\";\r\n\r\ninterface IStatusLightProps {\r\n    system: System;\r\n    text: string;\r\n    type: ResponseCode;\r\n    useIcon?: boolean;\r\n}\r\n\r\nconst StatusLight: SFC<IStatusLightProps> = ({ system, text, type }: IStatusLightProps) => {\r\n    return(\r\n        <div className=\"status-container\">\r\n            <div className=\"status__text\">{ system } <span>{ text }</span></div>\r\n          <div className={cn(\"status__light\", { [`status__light--${type}`]: true })} />\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default React.memo(StatusLight);\r\n","import React, { PureComponent } from 'react';\nimport { allBadges, Status, defaultPollingRate } from \"../../api\";\nimport { URLS } from \"../../api/urls\";\nimport StatusLight from \"../statusLight/StatusLight\";\n\nimport \"./App.css\";\n\ninterface IAppProps { }\n\ninterface IAppState {\n  statuses: Status[] | null\n}\n\nclass App extends PureComponent<IAppProps, IAppState> {\n\n  private interval: any = null;\n\n  state = {\n    statuses: null\n  }\n\n  async componentDidMount() {\n    this.badges();\n    this.interval = setInterval(this.badges, defaultPollingRate);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  private badges = async (): Promise<void> => {\n    const statuses = await allBadges(URLS);\n    this.setState({ statuses })\n  }\n\n  renderStatuses = (statuses: Status[] | null) => {\n    if (!statuses) {\n      return null;\n    }\n    return statuses.map((s, i) => <StatusLight key={i} system={s.system} text={s.task} type={s.status} useIcon />)\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.renderStatuses(this.state.statuses)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}